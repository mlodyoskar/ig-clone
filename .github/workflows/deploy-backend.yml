name: Deploy Backend to GCP Cloud Run

on:
  push:
    branches: [main]
    paths:
      - "apps/backend/**"
      - "packages/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "turbo.json"
      - ".github/workflows/deploy-backend.yml"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-central2
  REPOSITORY: ig-clone-repository
  SERVICE_NAME: ig-clone-backend

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker repository if not exists
        run: |
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for ig-clone" \
            --quiet || echo "Repository already exists"

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/backend/Dockerfile
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 4000 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 1 \
            --min-instances 0 \
            --concurrency 1 \
            --set-env-vars NODE_ENV=production

      - name: Show deployment URL
        run: |
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --format 'value(status.url)'

      - name: Test health endpoint
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "Testing backend at: $BACKEND_URL/api/health"
          # Wait a bit for the service to be ready
          sleep 10
          curl -f "$BACKEND_URL/api/health" || exit 1

      - name: Cleanup old images (keep last 5)
        run: |
          # List all images and keep only the 5 most recent
          gcloud artifacts docker images list \
            --repository=${{ env.REPOSITORY }} \
            --location=${{ env.REGION }} \
            --format="value(name)" | grep ${{ env.SERVICE_NAME }} | tail -n +6 | xargs -I {} gcloud artifacts docker images delete {} --quiet || true
